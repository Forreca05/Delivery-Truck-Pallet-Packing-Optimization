digraph "main"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node1 [id="Node000001",label="main",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="The main function providing a CLI to choose dataset and algorithm."];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="approximationAlgorithm",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$algorithms_8cpp.html#ae0c5f5ffcac9c38fe85a04cbbae7c305",tooltip="Returns best of two greedy approximation approaches."];
  Node2 -> Node3 [id="edge2_Node000002_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="greedySolutionA",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$algorithms_8cpp.html#a0a9d73dc5b7c6360232878905d718ee7",tooltip="Greedy heuristic using profit/weight ratio sorting."];
  Node2 -> Node4 [id="edge3_Node000002_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="greedySolutionB",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$algorithms_8cpp.html#aa4402a4577b89b4a3f9e19e526a30568",tooltip="Greedy heuristic using profit-first sorting."];
  Node1 -> Node5 [id="edge4_Node000001_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="backtracking",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$algorithms_8cpp.html#a733199de54ed4637db507a2ae53b4e55",tooltip=" "];
  Node5 -> Node6 [id="edge5_Node000005_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="backtrackingHelper",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$algorithms_8cpp.html#adaa7463dcb1122523ab9af474315b08c",tooltip="Recursive helper for backtracking solution of 0/1 knapsack."];
  Node6 -> Node6 [id="edge6_Node000006_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node7 [id="edge7_Node000001_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="dynamicProgramming",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$algorithms_8cpp.html#a8443d7254553a1a5dc6724b4d428d122",tooltip="Solves 0/1 knapsack via backtracking with optimal weight selection."];
  Node1 -> Node8 [id="edge8_Node000001_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="exhaustiveSearch",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$algorithms_8cpp.html#a2a7006f8aaadc640da45c3708ad135a9",tooltip="Solves the knapsack problem using exhaustive (brute-force) search."];
  Node1 -> Node9 [id="edge9_Node000001_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="integerLinearProgramming",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$algorithms_8cpp.html#a005a480951b54580d476ff5f562d36d1",tooltip="Solves 0/1 knapsack via branch-and-bound (ILP approach)."];
  Node9 -> Node10 [id="edge10_Node000009_Node000010",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="branchAndBoundSearch",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$algorithms_8cpp.html#a7ac01eab15213e13dcc7eb39e3484cdf",tooltip="Branch-and-bound search with profit/weight optimization."];
  Node10 -> Node10 [id="edge11_Node000010_Node000010",color="steelblue1",style="solid",tooltip=" "];
  Node10 -> Node11 [id="edge12_Node000010_Node000011",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="lpBound",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$algorithms_8cpp.html#a4acdc1fec2e9636ae1bcc52b2e95f5b1",tooltip="Computes upper bound via fractional knapsack relaxation."];
  Node1 -> Node12 [id="edge13_Node000001_Node000012",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="parsePalletsCSV",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$parser_8cpp.html#ade3f98a61f88db07fdf67e00e0b089e4",tooltip="Parses the pallets data from a CSV file."];
  Node1 -> Node13 [id="edge14_Node000001_Node000013",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="parseTruckAndPalletsCSV",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$parser_8cpp.html#aea05cb78883a45c65f12843d4fbbfd04",tooltip="Parses the truck's capacity from a CSV file."];
}
